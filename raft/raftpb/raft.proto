syntax = "proto2";
package raftpb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

// EntryType Entry 的类型
enum EntryType {
	EntryNormal       = 0;  // 普通的数据操作
	EntryConfChange   = 1; // 集群的变更操作 corresponds to pb.ConfChange
	EntryConfChangeV2 = 2; // corresponds to pb.ConfChangeV2
}

// Entry etcd 将每个独立的操作封装成一个 entry; 客户端发送消息给集群的单位是 Message, Message 中包含一个或多个 Entry.
// 各个节点中本地日志的单位也是 Entry
message Entry {
	optional uint64     Term  = 2 [(gogoproto.nullable) = false]; // Entry 所在的任期号 // 原子操作必须64位对齐 must be 64-bit aligned for atomic operations
	optional uint64     Index = 3 [(gogoproto.nullable) = false]; // Entry 所在的索引号 // must be 64-bit aligned for atomic operations
	optional EntryType  Type  = 1 [(gogoproto.nullable) = false]; // Entry 的类型
	optional bytes      Data  = 4;  // 具体的数据
}

message SnapshotMetadata {
	optional ConfState conf_state = 1 [(gogoproto.nullable) = false];
	optional uint64    index      = 2 [(gogoproto.nullable) = false];  // 快照中最后一条 Entry 记录的索引值
	optional uint64    term       = 3 [(gogoproto.nullable) = false];  // 快照中最一条 Entry 记录的任期值
}

message Snapshot {
	optional bytes            data     = 1;
	optional SnapshotMetadata metadata = 2 [(gogoproto.nullable) = false];
}

enum MessageType {
	MsgHup             = 0;  // 属于本地消息， 发起选举
	MsgBeat            = 1;  // 属于Leader节点的本地消息，Leader 收到此消息后，会向 Follower 节点广播 MsgHeartbeat 消息
	MsgProp            = 2;  // 属于本地消息
	MsgApp             = 3;  // 新任 leader 节点告知其他节点自己是新的 leader
	MsgAppResp         = 4;
	MsgVote            = 5;
	MsgVoteResp        = 6;
	MsgSnap            = 7;   // 快照消息；leader 节点向目标节点发送消息时，如果根据 Next 值查找 term 或 entries 失败， 就发送快照消息
	MsgHeartbeat       = 8;
	MsgHeartbeatResp   = 9;   // Leader 节点向 Follower 发送的心跳探活消息
	MsgUnreachable     = 10;
	MsgSnapStatus      = 11;
	MsgCheckQuorum     = 12;  // 本地消息，检测当前节点是否与发部分节点连通
	MsgTransferLeader  = 13;
	MsgTimeoutNow      = 14;
	MsgReadIndex       = 15;  // 属于本地消息
	MsgReadIndexResp   = 16;
	MsgPreVote         = 17;  // 如果开启了 preVote， 处理 MsgHup 消息时， 会发送 MsgPreVote 消息
	MsgPreVoteResp     = 18;  // PreCandidate 状态的节点会向发送向其他节点发送 MsgPreVote 消息， 其他节点向 PreCandidate 节点返回 MsgPreVoteResp 类型的消息， 在 PreCandidate 节点上会对 MsgPreVoteResp 类型的消息进行处理
}

//  Message 所有消息的抽象
message Message {
	optional MessageType type        = 1  [(gogoproto.nullable) = false];  // 消息的类型, raft 根据这个字段辨别不同类型的消息,对它们分别做处理
	optional uint64      to          = 2  [(gogoproto.nullable) = false];  // 消息的目标节点ID
	optional uint64      from        = 3  [(gogoproto.nullable) = false];  // 发送消息的节点 ID
	optional uint64      term        = 4  [(gogoproto.nullable) = false];  // 发送消息的节点的 Term 值. 为 0 时表示本地消息.
	optional uint64      logTerm     = 5  [(gogoproto.nullable) = false];  // 该消息携带的第一条 Entry 记录的 Term 值.
	optional uint64      index       = 6  [(gogoproto.nullable) = false];  // 索引值,不同的消息类型 索引值代表的意义不同:
																				// MsgApp: 表示其携带的 entries 中前一条记录的索引值
																				// MsgAppResp: Follower 节点提示 Leader 节点下次从哪个位置开始发送 Entry 记录,, 即告知 Leader 正确的 nextindex
	repeated Entry       entries     = 7  [(gogoproto.nullable) = false];  // Entry 集合, 不同类型的消息发送的 entries 代表的含义也不同:
																				// MsgApp: 表示 Leader 节点复制给 Follower 节点的 Entry 记录.
	optional uint64      commit      = 8  [(gogoproto.nullable) = false];  // 消息发送节点的提交位置(commitIndex)
	optional Snapshot    snapshot    = 9  [(gogoproto.nullable) = false];  // 在传输快照时,该字段用于保存快照
	optional bool        reject      = 10 [(gogoproto.nullable) = false];  // 是否拒绝收到的消息.这个字段用于响应类型的消息.
	optional uint64      rejectHint  = 11 [(gogoproto.nullable) = false];  // Follower 节点的拒绝 Leader 节点的消息后,会在响应时的 rejectHint 记录合适的 Entry 索引值供 Leader 节点参考
	optional bytes       context     = 12;  // 记录消息的一些上下文信息,比如消息是否与 Leader 节点转移
}

message HardState {
	optional uint64 term   = 1 [(gogoproto.nullable) = false];
	optional uint64 vote   = 2 [(gogoproto.nullable) = false];
	optional uint64 commit = 3 [(gogoproto.nullable) = false];
}

// ConfChangeTransition specifies the behavior of a configuration change with
// respect to joint consensus.
enum ConfChangeTransition {
	// Automatically use the simple protocol if possible, otherwise fall back
	// to ConfChangeJointImplicit. Most applications will want to use this.
	ConfChangeTransitionAuto          = 0;
	// Use joint consensus unconditionally, and transition out of them
	// automatically (by proposing a zero configuration change).
	//
	// This option is suitable for applications that want to minimize the time
	// spent in the joint configuration and do not store the joint configuration
	// in the state machine (outside of InitialState).
	ConfChangeTransitionJointImplicit = 1;
	// Use joint consensus and remain in the joint configuration until the
	// application proposes a no-op configuration change. This is suitable for
	// applications that want to explicitly control the transitions, for example
	// to use a custom payload (via the Context field).
	ConfChangeTransitionJointExplicit = 2;
}

message ConfState {
	// The voters in the incoming config. (If the configuration is not joint,
	// then the outgoing config is empty).
	repeated uint64 voters = 1;
	// The learners in the incoming config.
	repeated uint64 learners          = 2;
	// The voters in the outgoing config.
	repeated uint64 voters_outgoing   = 3;
	// The nodes that will become learners when the outgoing config is removed.
	// These nodes are necessarily currently in nodes_joint (or they would have
	// been added to the incoming config right away).
	repeated uint64 learners_next     = 4;
	// If set, the config is joint and Raft will automatically transition into
	// the final config (i.e. remove the outgoing config) when this is safe.
	optional bool   auto_leave        = 5 [(gogoproto.nullable) = false];
}

enum ConfChangeType {
	ConfChangeAddNode        = 0;
	ConfChangeRemoveNode     = 1;
	ConfChangeUpdateNode     = 2;
	ConfChangeAddLearnerNode = 3;
}

message ConfChange {
	optional ConfChangeType  type    = 2 [(gogoproto.nullable) = false];
	optional uint64          node_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID" ];
	optional bytes           context = 4;

	// NB: this is used only by etcd to thread through a unique identifier.
	// Ideally it should really use the Context instead. No counterpart to
	// this field exists in ConfChangeV2.
	optional uint64          id      = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID" ];
}

// ConfChangeSingle is an individual configuration change operation. Multiple
// such operations can be carried out atomically via a ConfChangeV2.
message ConfChangeSingle {
	optional ConfChangeType  type    = 1 [(gogoproto.nullable) = false];
	optional uint64          node_id = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID"];
}

// ConfChangeV2 messages initiate configuration changes. They support both the
// simple "one at a time" membership change protocol and full Joint Consensus
// allowing for arbitrary changes in membership.
//
// The supplied context is treated as an opaque payload and can be used to
// attach an action on the state machine to the application of the config change
// proposal. Note that contrary to Joint Consensus as outlined in the Raft
// paper[1], configuration changes become active when they are *applied* to the
// state machine (not when they are appended to the log).
//
// The simple protocol can be used whenever only a single change is made.
//
// Non-simple changes require the use of Joint Consensus, for which two
// configuration changes are run. The first configuration change specifies the
// desired changes and transitions the Raft group into the joint configuration,
// in which quorum requires a majority of both the pre-changes and post-changes
// configuration. Joint Consensus avoids entering fragile intermediate
// configurations that could compromise survivability. For example, without the
// use of Joint Consensus and running across three availability zones with a
// replication factor of three, it is not possible to replace a voter without
// entering an intermediate configuration that does not survive the outage of
// one availability zone.
//
// The provided ConfChangeTransition specifies how (and whether) Joint Consensus
// is used, and assigns the task of leaving the joint configuration either to
// Raft or the application. Leaving the joint configuration is accomplished by
// proposing a ConfChangeV2 with only and optionally the Context field
// populated.
//
// For details on Raft membership changes, see:
//
// [1]: https://github.com/ongardie/dissertation/blob/master/online-trim.pdf
message ConfChangeV2 {
	optional ConfChangeTransition transition = 1 [(gogoproto.nullable) = false];
	repeated ConfChangeSingle     changes =    2 [(gogoproto.nullable) = false];
	optional bytes                context =    3;
}
